import Head from "next/head";
import styles from "../styles/Home.module.css";
import { Button, Stack, Grid, Divider } from "@mui/material";
import React, { useState, useEffect } from "react";

export default function Home() {
  const [time, setTime] = useState(0);
  const [running, setRunning] = useState(false);

  useEffect(() => {
    let intervalId;

    const timer = () => {
      setTime(time + 1);
    };

    if (running) {
      // 1. setInterval() method calls a function or evaluates an expression at specified time intervals
      // 2. The setInterval() method will continue calling the function until we use another method called clearInterval()
      //    or until the window is closed
      // 3. The id value returned from setInterval() is the same id we pass into clearInterval() to stop the interval from
      //    running

      intervalId = setInterval(timer, 1000);
    } else if (!running) {
      clearInterval(intervalId);
      setRunning(false);
    }
    // Every time the render function of a component gets called, the Virtual DOM gets re-build. If a component is no
    // longer necessary, it gets removed from the virtual DOM (unmounted)
    // Every effect may return a function that cleans up after it. This lets us keep the logic for adding and removing
    // subscriptions close to each other. Theyâ€™re part of the same effect!
    // React performs the cleanup when the component unmounts. However effects run for every render and not just once.
    // This is why React also cleans up effects from the previous render before running the effects next time.
    return () => clearInterval(intervalId);
  }, [running, time]);

  const timeConverter = () => {
    let minutes = Math.trunc(time / 60);
    let seconds = time % 60;
    // return minutes + ":" + seconds;
    return (
      <Stack direction="row" spacing={2}>
        <div>{minutes < 10 ? "0" + minutes : minutes}</div>
        <div>:</div>
        <div>{seconds < 10 ? "0" + seconds : seconds}</div>
      </Stack>
    );
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Stop Watch</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>Welcome to the Stop Watch</h1>
        <h1>{timeConverter()}</h1>
        <Stack spacing={2} direction="row">
          <Button variant="contained" onClick={() => setRunning(true)}>
            Start
          </Button>
          <Button variant="contained" onClick={() => setRunning(false)}>
            Stop
          </Button>
          <Button
            variant="contained"
            onClick={() => {
              setTime(0);
            }}
          >
            Reset
          </Button>
        </Stack>
      </main>
    </div>
  );
}
